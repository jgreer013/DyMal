<_start>:
xor    %ebp,%ebp
mov    %rdx,%r9
pop    %rsi
mov    %rsp,%rdx
and    $0xfffffffffffffff0,%rsp
push   %rax
push   %rsp
mov    $0x400d20,%r8
mov    $0x400cb0,%rcx
mov    $0x400ba3,%rdi
callq  4006c0 <__libc_start_main@plt>
hlt    
nopw   0x0(%rax,%rax,1)
<deregister_tm_clones>:
mov    $0x60206f,%eax
push   %rbp
sub    $0x602068,%rax
cmp    $0xe,%rax
mov    %rsp,%rbp
jbe    400770 <deregister_tm_clones+0x30>
mov    $0x0,%eax
test   %rax,%rax
je     400770 <deregister_tm_clones+0x30>
pop    %rbp
mov    $0x602068,%edi
jmpq   *%rax
nopw   0x0(%rax,%rax,1)
pop    %rbp
retq   
nopl   0x0(%rax)
nopw   %cs:0x0(%rax,%rax,1)
<register_tm_clones>:
mov    $0x602068,%esi
push   %rbp
sub    $0x602068,%rsi
sar    $0x3,%rsi
mov    %rsp,%rbp
mov    %rsi,%rax
shr    $0x3f,%rax
add    %rax,%rsi
sar    %rsi
je     4007b8 <register_tm_clones+0x38>
mov    $0x0,%eax
test   %rax,%rax
je     4007b8 <register_tm_clones+0x38>
pop    %rbp
mov    $0x602068,%edi
jmpq   *%rax
nopl   (%rax)
pop    %rbp
retq   
nopw   0x0(%rax,%rax,1)
<__do_global_dtors_aux>:
cmpb   $0x0,0x2018a1(%rip)        
jne    4007da <__do_global_dtors_aux+0x1a>
push   %rbp
mov    %rsp,%rbp
callq  400740 <deregister_tm_clones>
pop    %rbp
movb   $0x1,0x20188e(%rip)        
repz retq 
nopl   0x0(%rax)
<frame_dummy>:
mov    $0x601e10,%edi
cmpq   $0x0,(%rdi)
jne    4007f0 <frame_dummy+0x10>
jmp    400780 <register_tm_clones>
nopl   (%rax)
mov    $0x0,%eax
test   %rax,%rax
je     4007eb <frame_dummy+0xb>
push   %rbp
mov    %rsp,%rbp
callq  *%rax
pop    %rbp
jmpq   400780 <register_tm_clones>
<_Z9mergeSortPiii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %esi,-0x1c(%rbp)
mov    %edx,-0x20(%rbp)
mov    -0x1c(%rbp),%eax
cmp    -0x20(%rbp),%eax
jge    400879 <_Z9mergeSortPiii+0x73>
mov    -0x20(%rbp),%eax
sub    -0x1c(%rbp),%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
mov    %eax,%edx
mov    -0x1c(%rbp),%eax
add    %edx,%eax
mov    %eax,-0x4(%rbp)
mov    -0x4(%rbp),%edx
mov    -0x1c(%rbp),%ecx
mov    -0x18(%rbp),%rax
mov    %ecx,%esi
mov    %rax,%rdi
callq  400806 <_Z9mergeSortPiii>
mov    -0x4(%rbp),%eax
lea    0x1(%rax),%ecx
mov    -0x20(%rbp),%edx
mov    -0x18(%rbp),%rax
mov    %ecx,%esi
mov    %rax,%rdi
callq  400806 <_Z9mergeSortPiii>
mov    -0x20(%rbp),%ecx
mov    -0x4(%rbp),%edx
mov    -0x1c(%rbp),%esi
mov    -0x18(%rbp),%rax
mov    %rax,%rdi
callq  40087c <_Z5mergePiiii>
nop
leaveq 
retq   
<_Z5mergePiiii>:
push   %rbp
mov    %rsp,%rbp
push   %r15
push   %r14
push   %r13
push   %r12
sub    $0x60,%rsp
mov    %rdi,-0x68(%rbp)
mov    %esi,-0x6c(%rbp)
mov    %edx,-0x70(%rbp)
mov    %ecx,-0x74(%rbp)
mov    %fs:0x28,%rax
mov    %rax,-0x28(%rbp)
xor    %eax,%eax
mov    %rsp,%rax
mov    %rax,%rsi
mov    -0x70(%rbp),%eax
sub    -0x6c(%rbp),%eax
add    $0x1,%eax
mov    %eax,-0x50(%rbp)
mov    -0x74(%rbp),%eax
sub    -0x70(%rbp),%eax
mov    %eax,-0x4c(%rbp)
mov    -0x50(%rbp),%eax
cltq   
sub    $0x1,%rax
mov    %rax,-0x48(%rbp)
mov    %rax,%rdx
add    $0x1,%rdx
mov    %rdx,%r14
mov    $0x0,%r15d
mov    %rax,%rdx
add    $0x1,%rdx
mov    %rdx,%r12
mov    $0x0,%r13d
add    $0x1,%rax
shl    $0x2,%rax
lea    0x3(%rax),%rdx
mov    $0x10,%eax
sub    $0x1,%rax
add    %rdx,%rax
mov    $0x10,%edi
mov    $0x0,%edx
div    %rdi
imul   $0x10,%rax,%rax
sub    %rax,%rsp
mov    %rsp,%rax
add    $0x3,%rax
shr    $0x2,%rax
shl    $0x2,%rax
mov    %rax,-0x40(%rbp)
mov    -0x4c(%rbp),%eax
cltq   
sub    $0x1,%rax
mov    %rax,-0x38(%rbp)
mov    %rax,%rdx
add    $0x1,%rdx
mov    %rdx,%r10
mov    $0x0,%r11d
mov    %rax,%rdx
add    $0x1,%rdx
mov    %rdx,%r8
mov    $0x0,%r9d
add    $0x1,%rax
shl    $0x2,%rax
lea    0x3(%rax),%rdx
mov    $0x10,%eax
sub    $0x1,%rax
add    %rdx,%rax
mov    $0x10,%edi
mov    $0x0,%edx
div    %rdi
imul   $0x10,%rax,%rax
sub    %rax,%rsp
mov    %rsp,%rax
add    $0x3,%rax
shr    $0x2,%rax
shl    $0x2,%rax
mov    %rax,-0x30(%rbp)
movl   $0x0,-0x5c(%rbp)
mov    -0x5c(%rbp),%eax
cmp    -0x50(%rbp),%eax
jge    4009d8 <_Z5mergePiiii+0x15c>
mov    -0x6c(%rbp),%edx
mov    -0x5c(%rbp),%eax
add    %edx,%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x68(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%ecx
mov    -0x40(%rbp),%rax
mov    -0x5c(%rbp),%edx
movslq %edx,%rdx
mov    %ecx,(%rax,%rdx,4)
addl   $0x1,-0x5c(%rbp)
jmp    4009a2 <_Z5mergePiiii+0x126>
movl   $0x0,-0x58(%rbp)
mov    -0x58(%rbp),%eax
cmp    -0x4c(%rbp),%eax
jge    400a18 <_Z5mergePiiii+0x19c>
mov    -0x70(%rbp),%eax
lea    0x1(%rax),%edx
mov    -0x58(%rbp),%eax
add    %edx,%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x68(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%ecx
mov    -0x30(%rbp),%rax
mov    -0x58(%rbp),%edx
movslq %edx,%rdx
mov    %ecx,(%rax,%rdx,4)
addl   $0x1,-0x58(%rbp)
jmp    4009df <_Z5mergePiiii+0x163>
movl   $0x0,-0x5c(%rbp)
movl   $0x0,-0x58(%rbp)
mov    -0x6c(%rbp),%eax
mov    %eax,-0x54(%rbp)
mov    -0x5c(%rbp),%eax
cmp    -0x50(%rbp),%eax
jge    400ab9 <_Z5mergePiiii+0x23d>
mov    -0x58(%rbp),%eax
cmp    -0x4c(%rbp),%eax
jge    400ab9 <_Z5mergePiiii+0x23d>
mov    -0x40(%rbp),%rax
mov    -0x5c(%rbp),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,4),%ecx
mov    -0x30(%rbp),%rax
mov    -0x58(%rbp),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,4),%eax
cmp    %eax,%ecx
jg     400a88 <_Z5mergePiiii+0x20c>
mov    -0x54(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x68(%rbp),%rax
lea    (%rdx,%rax,1),%rcx
mov    -0x40(%rbp),%rax
mov    -0x5c(%rbp),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,4),%eax
mov    %eax,(%rcx)
addl   $0x1,-0x5c(%rbp)
jmp    400ab0 <_Z5mergePiiii+0x234>
mov    -0x54(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x68(%rbp),%rax
lea    (%rdx,%rax,1),%rcx
mov    -0x30(%rbp),%rax
mov    -0x58(%rbp),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,4),%eax
mov    %eax,(%rcx)
addl   $0x1,-0x58(%rbp)
addl   $0x1,-0x54(%rbp)
jmpq   400a2c <_Z5mergePiiii+0x1b0>
mov    -0x5c(%rbp),%eax
cmp    -0x50(%rbp),%eax
jge    400aef <_Z5mergePiiii+0x273>
mov    -0x54(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x68(%rbp),%rax
lea    (%rdx,%rax,1),%rcx
mov    -0x40(%rbp),%rax
mov    -0x5c(%rbp),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,4),%eax
mov    %eax,(%rcx)
addl   $0x1,-0x5c(%rbp)
addl   $0x1,-0x54(%rbp)
jmp    400ab9 <_Z5mergePiiii+0x23d>
mov    -0x58(%rbp),%eax
cmp    -0x4c(%rbp),%eax
jge    400b25 <_Z5mergePiiii+0x2a9>
mov    -0x54(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x68(%rbp),%rax
lea    (%rdx,%rax,1),%rcx
mov    -0x30(%rbp),%rax
mov    -0x58(%rbp),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,4),%eax
mov    %eax,(%rcx)
addl   $0x1,-0x58(%rbp)
addl   $0x1,-0x54(%rbp)
jmp    400aef <_Z5mergePiiii+0x273>
mov    %rsi,%rsp
nop
mov    -0x28(%rbp),%rax
xor    %fs:0x28,%rax
je     400b3d <_Z5mergePiiii+0x2c1>
callq  4006f0 <__stack_chk_fail@plt>
lea    -0x20(%rbp),%rsp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
pop    %rbp
retq   
<_Z10printArrayPii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %esi,-0x1c(%rbp)
movl   $0x0,-0x4(%rbp)
mov    -0x4(%rbp),%eax
cmp    -0x1c(%rbp),%eax
jge    400b96 <_Z10printArrayPii+0x4b>
mov    -0x4(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%eax
mov    %eax,%esi
mov    $0x400d34,%edi
mov    $0x0,%eax
callq  400680 <printf@plt>
addl   $0x1,-0x4(%rbp)
jmp    400b61 <_Z10printArrayPii+0x16>
mov    $0xa,%edi
callq  4006a0 <putchar@plt>
nop
leaveq 
retq   
<main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %fs:0x28,%rax
mov    %rax,-0x8(%rbp)
xor    %eax,%eax
movl   $0xc,-0x20(%rbp)
movl   $0xb,-0x1c(%rbp)
movl   $0xd,-0x18(%rbp)
movl   $0x5,-0x14(%rbp)
movl   $0x6,-0x10(%rbp)
movl   $0x7,-0xc(%rbp)
mov    $0x6,%eax
mov    %eax,-0x24(%rbp)
mov    $0x400d38,%edi
callq  400690 <puts@plt>
mov    -0x24(%rbp),%edx
lea    -0x20(%rbp),%rax
mov    %edx,%esi
mov    %rax,%rdi
callq  400b4b <_Z10printArrayPii>
mov    -0x24(%rbp),%eax
lea    -0x1(%rax),%edx
lea    -0x20(%rbp),%rax
mov    $0x0,%esi
mov    %rax,%rdi
callq  400806 <_Z9mergeSortPiii>
mov    $0x400d48,%edi
callq  400690 <puts@plt>
mov    -0x24(%rbp),%edx
lea    -0x20(%rbp),%rax
mov    %edx,%esi
mov    %rax,%rdi
callq  400b4b <_Z10printArrayPii>
mov    $0x0,%eax
mov    -0x8(%rbp),%rcx
xor    %fs:0x28,%rcx
je     400c52 <main+0xaf>
callq  4006f0 <__stack_chk_fail@plt>
leaveq 
retq   
<_Z41__static_initialization_and_destruction_0ii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %edi,-0x4(%rbp)
mov    %esi,-0x8(%rbp)
cmpl   $0x1,-0x4(%rbp)
jne    400c8f <_Z41__static_initialization_and_destruction_0ii+0x3b>
cmpl   $0xffff,-0x8(%rbp)
jne    400c8f <_Z41__static_initialization_and_destruction_0ii+0x3b>
mov    $0x602069,%edi
callq  4006b0 <_ZNSt8ios_base4InitC1Ev@plt>
mov    $0x602060,%edx
mov    $0x602069,%esi
mov    $0x4006e0,%edi
callq  4006d0 <__cxa_atexit@plt>
nop
leaveq 
retq   
<_GLOBAL__sub_I__Z9mergeSortPiii>:
push   %rbp
mov    %rsp,%rbp
mov    $0xffff,%esi
mov    $0x1,%edi
callq  400c54 <_Z41__static_initialization_and_destruction_0ii>
pop    %rbp
retq   
nopw   0x0(%rax,%rax,1)
<__libc_csu_init>:
push   %r15
push   %r14
mov    %edi,%r15d
push   %r13
push   %r12
lea    0x201136(%rip),%r12        
push   %rbp
lea    0x20113e(%rip),%rbp        
push   %rbx
mov    %rsi,%r14
mov    %rdx,%r13
sub    %r12,%rbp
sub    $0x8,%rsp
sar    $0x3,%rbp
callq  400648 <_init>
test   %rbp,%rbp
je     400d06 <__libc_csu_init+0x56>
xor    %ebx,%ebx
nopl   0x0(%rax,%rax,1)
mov    %r13,%rdx
mov    %r14,%rsi
mov    %r15d,%edi
callq  *(%r12,%rbx,8)
add    $0x1,%rbx
cmp    %rbp,%rbx
jne    400cf0 <__libc_csu_init+0x40>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
retq   
nop
nopw   %cs:0x0(%rax,%rax,1)
<__libc_csu_fini>:
repz retq 
