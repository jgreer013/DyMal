<_start>:
xor    %ebp,%ebp
mov    %rdx,%r9
pop    %rsi
mov    %rsp,%rdx
and    $0xfffffffffffffff0,%rsp
push   %rax
push   %rsp
lea    0x4da(%rip),%r8        
lea    0x463(%rip),%rcx        
lea    0x2e1(%rip),%rdi        
callq  *0x201806(%rip)        
hlt    
nopl   0x0(%rax,%rax,1)
<deregister_tm_clones>:
lea    0x201829(%rip),%rdi        
push   %rbp
lea    0x201821(%rip),%rax        
cmp    %rdi,%rax
mov    %rsp,%rbp
je     810 <deregister_tm_clones+0x30>
mov    0x2017da(%rip),%rax        
test   %rax,%rax
je     810 <deregister_tm_clones+0x30>
pop    %rbp
jmpq   *%rax
nopw   %cs:0x0(%rax,%rax,1)
pop    %rbp
retq   
nopl   0x0(%rax)
nopw   %cs:0x0(%rax,%rax,1)
<register_tm_clones>:
lea    0x2017e9(%rip),%rdi        
lea    0x2017e2(%rip),%rsi        
push   %rbp
sub    %rdi,%rsi
mov    %rsp,%rbp
sar    $0x3,%rsi
mov    %rsi,%rax
shr    $0x3f,%rax
add    %rax,%rsi
sar    %rsi
je     860 <register_tm_clones+0x40>
mov    0x2017a1(%rip),%rax        
test   %rax,%rax
je     860 <register_tm_clones+0x40>
pop    %rbp
jmpq   *%rax
nopw   0x0(%rax,%rax,1)
pop    %rbp
retq   
nopl   0x0(%rax)
nopw   %cs:0x0(%rax,%rax,1)
<__do_global_dtors_aux>:
cmpb   $0x0,0x2018b9(%rip)        
jne    8a8 <__do_global_dtors_aux+0x38>
cmpq   $0x0,0x20174f(%rip)        
push   %rbp
mov    %rsp,%rbp
je     893 <__do_global_dtors_aux+0x23>
mov    0x20177a(%rip),%rdi        
callq  7a0 <__cxa_finalize@plt>
callq  7e0 <deregister_tm_clones>
movb   $0x1,0x201891(%rip)        
pop    %rbp
retq   
nopl   0x0(%rax)
repz retq 
nopw   0x0(%rax,%rax,1)
<frame_dummy>:
push   %rbp
mov    %rsp,%rbp
pop    %rbp
jmpq   820 <register_tm_clones>
<_Z7heapifyPiii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %esi,-0x1c(%rbp)
mov    %edx,-0x20(%rbp)
mov    -0x20(%rbp),%eax
mov    %eax,-0xc(%rbp)
mov    -0x20(%rbp),%eax
add    %eax,%eax
add    $0x1,%eax
mov    %eax,-0x8(%rbp)
mov    -0x20(%rbp),%eax
add    $0x1,%eax
add    %eax,%eax
mov    %eax,-0x4(%rbp)
mov    -0x8(%rbp),%eax
cmp    -0x1c(%rbp),%eax
jge    926 <_Z7heapifyPiii+0x6c>
mov    -0x8(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%edx
mov    -0xc(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rcx
mov    -0x18(%rbp),%rax
add    %rcx,%rax
mov    (%rax),%eax
cmp    %eax,%edx
jle    926 <_Z7heapifyPiii+0x6c>
mov    -0x8(%rbp),%eax
mov    %eax,-0xc(%rbp)
mov    -0x4(%rbp),%eax
cmp    -0x1c(%rbp),%eax
jge    964 <_Z7heapifyPiii+0xaa>
mov    -0x4(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%edx
mov    -0xc(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rcx
mov    -0x18(%rbp),%rax
add    %rcx,%rax
mov    (%rax),%eax
cmp    %eax,%edx
jle    964 <_Z7heapifyPiii+0xaa>
mov    -0x4(%rbp),%eax
mov    %eax,-0xc(%rbp)
mov    -0xc(%rbp),%eax
cmp    -0x20(%rbp),%eax
je     9b3 <_Z7heapifyPiii+0xf9>
mov    -0xc(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rax,%rdx
mov    -0x20(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rcx
mov    -0x18(%rbp),%rax
add    %rcx,%rax
mov    %rdx,%rsi
mov    %rax,%rdi
callq  bb9 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
mov    -0xc(%rbp),%edx
mov    -0x1c(%rbp),%ecx
mov    -0x18(%rbp),%rax
mov    %ecx,%esi
mov    %rax,%rdi
callq  8ba <_Z7heapifyPiii>
nop
leaveq 
retq   
<_Z8heapSortPii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %esi,-0x1c(%rbp)
mov    -0x1c(%rbp),%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
sub    $0x1,%eax
mov    %eax,-0x8(%rbp)
cmpl   $0x0,-0x8(%rbp)
js     9f7 <_Z8heapSortPii+0x41>
mov    -0x8(%rbp),%edx
mov    -0x1c(%rbp),%ecx
mov    -0x18(%rbp),%rax
mov    %ecx,%esi
mov    %rax,%rdi
callq  8ba <_Z7heapifyPiii>
subl   $0x1,-0x8(%rbp)
jmp    9d7 <_Z8heapSortPii+0x21>
mov    -0x1c(%rbp),%eax
sub    $0x1,%eax
mov    %eax,-0x4(%rbp)
cmpl   $0x0,-0x4(%rbp)
js     a45 <_Z8heapSortPii+0x8f>
mov    -0x4(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rax,%rdx
mov    -0x18(%rbp),%rax
mov    %rdx,%rsi
mov    %rax,%rdi
callq  bb9 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
mov    -0x4(%rbp),%ecx
mov    -0x18(%rbp),%rax
mov    $0x0,%edx
mov    %ecx,%esi
mov    %rax,%rdi
callq  8ba <_Z7heapifyPiii>
subl   $0x1,-0x4(%rbp)
jmp    a00 <_Z8heapSortPii+0x4a>
nop
leaveq 
retq   
<_Z10printArrayPii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %esi,-0x1c(%rbp)
movl   $0x0,-0x4(%rbp)
mov    -0x4(%rbp),%eax
cmp    -0x1c(%rbp),%eax
jge    a9f <_Z10printArrayPii+0x57>
mov    -0x4(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%eax
mov    %eax,%esi
lea    0x20159b(%rip),%rdi        
callq  790 <_ZNSolsEi@plt>
lea    0x224(%rip),%rsi        
mov    %rax,%rdi
callq  760 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
addl   $0x1,-0x4(%rbp)
jmp    a5e <_Z10printArrayPii+0x16>
lea    0x211(%rip),%rsi        
lea    0x201573(%rip),%rdi        
callq  760 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
nop
leaveq 
retq   
<main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %fs:0x28,%rax
mov    %rax,-0x8(%rbp)
xor    %eax,%eax
movl   $0xc,-0x20(%rbp)
movl   $0xb,-0x1c(%rbp)
movl   $0xd,-0x18(%rbp)
movl   $0x5,-0x14(%rbp)
movl   $0x6,-0x10(%rbp)
movl   $0x7,-0xc(%rbp)
movl   $0x6,-0x24(%rbp)
mov    -0x24(%rbp),%edx
lea    -0x20(%rbp),%rax
mov    %edx,%esi
mov    %rax,%rdi
callq  9b6 <_Z8heapSortPii>
lea    0x1a4(%rip),%rsi        
lea    0x201504(%rip),%rdi        
callq  760 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
mov    -0x24(%rbp),%edx
lea    -0x20(%rbp),%rax
mov    %edx,%esi
mov    %rax,%rdi
callq  a48 <_Z10printArrayPii>
mov    $0x0,%eax
mov    -0x8(%rbp),%rcx
xor    %fs:0x28,%rcx
je     b4b <main+0x96>
callq  770 <__stack_chk_fail@plt>
leaveq 
retq   
<_Z41__static_initialization_and_destruction_0ii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %edi,-0x4(%rbp)
mov    %esi,-0x8(%rbp)
cmpl   $0x1,-0x4(%rbp)
jne    b93 <_Z41__static_initialization_and_destruction_0ii+0x46>
cmpl   $0xffff,-0x8(%rbp)
jne    b93 <_Z41__static_initialization_and_destruction_0ii+0x46>
lea    0x2015c0(%rip),%rdi        
callq  780 <_ZNSt8ios_base4InitC1Ev@plt>
lea    0x20148b(%rip),%rdx        
lea    0x2015ad(%rip),%rsi        
mov    0x20146d(%rip),%rax        
mov    %rax,%rdi
callq  750 <__cxa_atexit@plt>
nop
leaveq 
retq   
<_GLOBAL__sub_I__Z7heapifyPiii>:
push   %rbp
mov    %rsp,%rbp
mov    $0xffff,%esi
mov    $0x1,%edi
callq  b4d <_Z41__static_initialization_and_destruction_0ii>
pop    %rbp
retq   
<_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
push   %rbp
mov    %rsp,%rbp
mov    %rdi,-0x8(%rbp)
mov    -0x8(%rbp),%rax
pop    %rbp
retq   
<_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %rsi,-0x20(%rbp)
mov    %fs:0x28,%rax
mov    %rax,-0x8(%rbp)
xor    %eax,%eax
mov    -0x18(%rbp),%rax
mov    %rax,%rdi
callq  bab <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
mov    (%rax),%eax
mov    %eax,-0xc(%rbp)
mov    -0x20(%rbp),%rax
mov    %rax,%rdi
callq  bab <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
mov    (%rax),%edx
mov    -0x18(%rbp),%rax
mov    %edx,(%rax)
lea    -0xc(%rbp),%rax
mov    %rax,%rdi
callq  bab <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
mov    (%rax),%edx
mov    -0x20(%rbp),%rax
mov    %edx,(%rax)
nop
mov    -0x8(%rbp),%rax
xor    %fs:0x28,%rax
je     c26 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_+0x6d>
callq  770 <__stack_chk_fail@plt>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)
<__libc_csu_init>:
push   %r15
push   %r14
mov    %rdx,%r15
push   %r13
push   %r12
lea    0x201136(%rip),%r12        
push   %rbp
lea    0x20113e(%rip),%rbp        
push   %rbx
mov    %edi,%r13d
mov    %rsi,%r14
sub    %r12,%rbp
sub    $0x8,%rsp
sar    $0x3,%rbp
callq  720 <_init>
test   %rbp,%rbp
je     c86 <__libc_csu_init+0x56>
xor    %ebx,%ebx
nopl   0x0(%rax,%rax,1)
mov    %r15,%rdx
mov    %r14,%rsi
mov    %r13d,%edi
callq  *(%r12,%rbx,8)
add    $0x1,%rbx
cmp    %rbx,%rbp
jne    c70 <__libc_csu_init+0x40>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
retq   
nop
nopw   %cs:0x0(%rax,%rax,1)
<__libc_csu_fini>:
repz retq 
