<_start>:
xor    %ebp,%ebp
mov    %rdx,%r9
pop    %rsi
mov    %rsp,%rdx
and    $0xfffffffffffffff0,%rsp
push   %rax
push   %rsp
lea    0x43a(%rip),%r8        
lea    0x3c3(%rip),%rcx        
lea    0x206(%rip),%rdi        
callq  *0x201796(%rip)        
hlt    
nopl   0x0(%rax,%rax,1)
<deregister_tm_clones>:
lea    0x2017b9(%rip),%rdi        
push   %rbp
lea    0x2017b1(%rip),%rax        
cmp    %rdi,%rax
mov    %rsp,%rbp
je     880 <deregister_tm_clones+0x30>
mov    0x20176a(%rip),%rax        
test   %rax,%rax
je     880 <deregister_tm_clones+0x30>
pop    %rbp
jmpq   *%rax
nopw   %cs:0x0(%rax,%rax,1)
pop    %rbp
retq   
nopl   0x0(%rax)
nopw   %cs:0x0(%rax,%rax,1)
<register_tm_clones>:
lea    0x201779(%rip),%rdi        
lea    0x201772(%rip),%rsi        
push   %rbp
sub    %rdi,%rsi
mov    %rsp,%rbp
sar    $0x3,%rsi
mov    %rsi,%rax
shr    $0x3f,%rax
add    %rax,%rsi
sar    %rsi
je     8d0 <register_tm_clones+0x40>
mov    0x201731(%rip),%rax        
test   %rax,%rax
je     8d0 <register_tm_clones+0x40>
pop    %rbp
jmpq   *%rax
nopw   0x0(%rax,%rax,1)
pop    %rbp
retq   
nopl   0x0(%rax)
nopw   %cs:0x0(%rax,%rax,1)
<__do_global_dtors_aux>:
cmpb   $0x0,0x201849(%rip)        
jne    918 <__do_global_dtors_aux+0x38>
cmpq   $0x0,0x2016df(%rip)        
push   %rbp
mov    %rsp,%rbp
je     903 <__do_global_dtors_aux+0x23>
mov    0x20170a(%rip),%rdi        
callq  810 <__cxa_finalize@plt>
callq  850 <deregister_tm_clones>
movb   $0x1,0x201821(%rip)        
pop    %rbp
retq   
nopl   0x0(%rax)
repz retq 
nopw   0x0(%rax,%rax,1)
<frame_dummy>:
push   %rbp
mov    %rsp,%rbp
pop    %rbp
jmpq   890 <register_tm_clones>
<_Z10jumpSearchPiii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rdi,-0x18(%rbp)
mov    %esi,-0x1c(%rbp)
mov    %edx,-0x20(%rbp)
mov    %fs:0x28,%rax
mov    %rax,-0x8(%rbp)
xor    %eax,%eax
mov    -0x20(%rbp),%eax
mov    %eax,%edi
callq  bb1 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
cvttsd2si %xmm0,%eax
mov    %eax,-0x10(%rbp)
movl   $0x0,-0xc(%rbp)
lea    -0x20(%rbp),%rdx
lea    -0x10(%rbp),%rax
mov    %rdx,%rsi
mov    %rax,%rdi
callq  bd6 <_ZSt3minIiERKT_S2_S2_>
mov    (%rax),%eax
cltq   
shl    $0x2,%rax
lea    -0x4(%rax),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%eax
cmp    %eax,-0x1c(%rbp)
setg   %al
test   %al,%al
je     9ca <_Z10jumpSearchPiii+0xa0>
mov    -0x10(%rbp),%eax
mov    %eax,-0xc(%rbp)
mov    -0x20(%rbp),%eax
mov    %eax,%edi
callq  bb1 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
movapd %xmm0,%xmm1
mov    -0x10(%rbp),%eax
cvtsi2sd %eax,%xmm0
addsd  %xmm1,%xmm0
cvttsd2si %xmm0,%eax
mov    %eax,-0x10(%rbp)
mov    -0x20(%rbp),%eax
cmp    %eax,-0xc(%rbp)
jl     963 <_Z10jumpSearchPiii+0x39>
mov    $0xffffffff,%eax
jmp    a34 <_Z10jumpSearchPiii+0x10a>
mov    -0xc(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%eax
cmp    %eax,-0x1c(%rbp)
jle    a0f <_Z10jumpSearchPiii+0xe5>
addl   $0x1,-0xc(%rbp)
lea    -0x20(%rbp),%rdx
lea    -0x10(%rbp),%rax
mov    %rdx,%rsi
mov    %rax,%rdi
callq  bd6 <_ZSt3minIiERKT_S2_S2_>
mov    (%rax),%eax
cmp    %eax,-0xc(%rbp)
sete   %al
test   %al,%al
je     9ca <_Z10jumpSearchPiii+0xa0>
mov    $0xffffffff,%eax
jmp    a34 <_Z10jumpSearchPiii+0x10a>
mov    -0xc(%rbp),%eax
cltq   
lea    0x0(,%rax,4),%rdx
mov    -0x18(%rbp),%rax
add    %rdx,%rax
mov    (%rax),%eax
cmp    %eax,-0x1c(%rbp)
jne    a2f <_Z10jumpSearchPiii+0x105>
mov    -0xc(%rbp),%eax
jmp    a34 <_Z10jumpSearchPiii+0x10a>
mov    $0xffffffff,%eax
mov    -0x8(%rbp),%rcx
xor    %fs:0x28,%rcx
je     a48 <_Z10jumpSearchPiii+0x11e>
callq  7e0 <__stack_chk_fail@plt>
leaveq 
retq   
<main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %fs:0x28,%rax
mov    %rax,-0x8(%rbp)
xor    %eax,%eax
movl   $0x0,-0x50(%rbp)
movl   $0x1,-0x4c(%rbp)
movl   $0x1,-0x48(%rbp)
movl   $0x2,-0x44(%rbp)
movl   $0x3,-0x40(%rbp)
movl   $0x5,-0x3c(%rbp)
movl   $0x8,-0x38(%rbp)
movl   $0xd,-0x34(%rbp)
movl   $0x15,-0x30(%rbp)
movl   $0x22,-0x2c(%rbp)
movl   $0x37,-0x28(%rbp)
movl   $0x59,-0x24(%rbp)
movl   $0x90,-0x20(%rbp)
movl   $0xe9,-0x1c(%rbp)
movl   $0x179,-0x18(%rbp)
movl   $0x262,-0x14(%rbp)
movl   $0x37,-0x5c(%rbp)
movl   $0x10,-0x58(%rbp)
mov    -0x58(%rbp),%edx
mov    -0x5c(%rbp),%ecx
lea    -0x50(%rbp),%rax
mov    %ecx,%esi
mov    %rax,%rdi
callq  92a <_Z10jumpSearchPiii>
mov    %eax,-0x54(%rbp)
lea    0x188(%rip),%rsi        
lea    0x20151c(%rip),%rdi        
callq  7d0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
mov    %rax,%rdx
mov    -0x5c(%rbp),%eax
mov    %eax,%esi
mov    %rdx,%rdi
callq  800 <_ZNSolsEi@plt>
lea    0x16e(%rip),%rsi        
mov    %rax,%rdi
callq  7d0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
mov    %rax,%rdx
mov    -0x54(%rbp),%eax
mov    %eax,%esi
mov    %rdx,%rdi
callq  800 <_ZNSolsEi@plt>
mov    $0x0,%eax
mov    -0x8(%rbp),%rcx
xor    %fs:0x28,%rcx
je     b51 <main+0x107>
callq  7e0 <__stack_chk_fail@plt>
leaveq 
retq   
<_Z41__static_initialization_and_destruction_0ii>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %edi,-0x4(%rbp)
mov    %esi,-0x8(%rbp)
cmpl   $0x1,-0x4(%rbp)
jne    b99 <_Z41__static_initialization_and_destruction_0ii+0x46>
cmpl   $0xffff,-0x8(%rbp)
jne    b99 <_Z41__static_initialization_and_destruction_0ii+0x46>
lea    0x2015ba(%rip),%rdi        
callq  7f0 <_ZNSt8ios_base4InitC1Ev@plt>
lea    0x201485(%rip),%rdx        
lea    0x2015a7(%rip),%rsi        
mov    0x201467(%rip),%rax        
mov    %rax,%rdi
callq  7c0 <__cxa_atexit@plt>
nop
leaveq 
retq   
<_GLOBAL__sub_I__Z10jumpSearchPiii>:
push   %rbp
mov    %rsp,%rbp
mov    $0xffff,%esi
mov    $0x1,%edi
callq  b53 <_Z41__static_initialization_and_destruction_0ii>
pop    %rbp
retq   
<_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %edi,-0x4(%rbp)
cvtsi2sdl -0x4(%rbp),%xmm0
callq  7b0 <sqrt@plt>
movq   %xmm0,%rax
mov    %rax,-0x10(%rbp)
movsd  -0x10(%rbp),%xmm0
leaveq 
retq   
<_ZSt3minIiERKT_S2_S2_>:
push   %rbp
mov    %rsp,%rbp
mov    %rdi,-0x8(%rbp)
mov    %rsi,-0x10(%rbp)
mov    -0x10(%rbp),%rax
mov    (%rax),%edx
mov    -0x8(%rbp),%rax
mov    (%rax),%eax
cmp    %eax,%edx
jge    bf8 <_ZSt3minIiERKT_S2_S2_+0x22>
mov    -0x10(%rbp),%rax
jmp    bfc <_ZSt3minIiERKT_S2_S2_+0x26>
mov    -0x8(%rbp),%rax
pop    %rbp
retq   
xchg   %ax,%ax
<__libc_csu_init>:
push   %r15
push   %r14
mov    %rdx,%r15
push   %r13
push   %r12
lea    0x20114e(%rip),%r12        
push   %rbp
lea    0x201156(%rip),%rbp        
push   %rbx
mov    %edi,%r13d
mov    %rsi,%r14
sub    %r12,%rbp
sub    $0x8,%rsp
sar    $0x3,%rbp
callq  780 <_init>
test   %rbp,%rbp
je     c56 <__libc_csu_init+0x56>
xor    %ebx,%ebx
nopl   0x0(%rax,%rax,1)
mov    %r15,%rdx
mov    %r14,%rsi
mov    %r13d,%edi
callq  *(%r12,%rbx,8)
add    $0x1,%rbx
cmp    %rbx,%rbp
jne    c40 <__libc_csu_init+0x40>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
retq   
nop
nopw   %cs:0x0(%rax,%rax,1)
<__libc_csu_fini>:
repz retq 
